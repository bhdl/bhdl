{
  "id": "CPgcAzdtqfzC",
  "parentId": "CPHKPFTgKmQp",
  "index": 2,
  "content": "\"(define (read-kicad-mod fname)\\n  \\\"Read a kicad mod file, parse it, and return a footprint object.\\\"\\n  (let ([kicad-mod (call-with-input-file fname\\n                     (λ (in)\\n                       (call-with-input-string\\n                           ;; replace dangling . as \\\".\\\" because (1 . 2 3) is\\n                           ;; illegal to read in racket\\n                           (string-replace (port->string in) \\\" .\\\" \\\" \\\\\\\".\\\\\\\"\\\")\\n                         (lambda (in) (read in)))))])\\n    (let ([specs\\n           (match kicad-mod\\n             [(list 'module name layer body ...)\\n              (filter\\n               identity\\n               (for/list [(e body)]\\n                 (match e\\n                   ;; TODO\\n                   ;; FIXME optional z\\n                    [`(fp_text reference ,text (at ,x ,y ,z ...) (layer ,l) ,other ...)\\n                     ;; TODO fp_text reference get the location\\n                    (text-spec x y)]\\n                   [`(fp_text ,_ ,text (at ,x ,y ,z ...) (layer ,l) ,other ...)\\n                     ;; TODO fp_text reference get the location\\n                    #f]\\n                   [`(fp_arc (start ,sx ,sy) (end ,ex ,ey)\\n                             (angle ,ag) (layer ,l) (width ,w))\\n                    #f]\\n                   [`(fp_line (start ,sx ,sy) (end ,ex ,ey) (layer ,l) (width ,w))\\n                    (line-spec sx sy ex ey w)]\\n                   ;; FIXME optional z\\n                   [`(pad \\\"\\\" np_thru_hole circle (at ,x ,y) (size ,s1 ,s2) (drill ,dsize) ,layer)\\n                     (pad-spec \\\"\\\" x y 0 'thru_hole 'circle (list s1 s2) (list dsize) 'multi)]\\n                   [`(pad ,name ,mounting-type ,shape (at ,x ,y ,a ...)\\n                          (size ,s1 ,s2)\\n                          ;; FIXME optional dsize\\n                          ;; FIXME Oval drill has (oval 1 2)\\n                          (drill ,dsize ...) ...\\n                          ;; example: (layers B.Cu B.Paste B.Mask)\\n                          (layers ,layers ...)\\n                          ,other-attrs ...)\\n                     ;; FIXME z is used for TQFP\\n                    (pad-spec name x y\\n                              (if (empty? a) 0 (first a))\\n                              mounting-type shape (list s1 s2) (if (not (empty? dsize))\\n                                                                            (first dsize)\\n                                                                            '())\\n                              (cond\\n                               [(member '*.Cu layers) 'multi]\\n                               [(member 'F.Cu layers) 'top]\\n                               [(member 'B.Cu layers) 'bottom]\\n                               [(member 'F.Paste layers)\\n                                (when (not (string-contains? \\n                                            (path->string fname)\\n                                            ;; FIXME this file is buggy\\n                                            \\\"Package_DFN_QFN.pretty/QFN\\\"))\\n                                      (warn \\\"Unknown layer\\\" layers \\\"from\\\" fname))\\n                                'top]\\n                               [else (error \\\"Unknown layer:\\\" layers)])\\n                              )]\\n                   ;; TODO\\n                   [`(fp_circle ,other ...)\\n                    #f]\\n                   [`(tedit ,other ...) #f]\\n                   [`(descr ,other ...) #f]\\n                   [`(tags ,other ...) #f]\\n                   [`(model ,other ...) #f]\\n                   [`(attr ,other ...) #f])))])])\\n      (let ([line-specs (filter line-spec? specs)]\\n            [pad-specs (filter-not\\n                        ;; FIXME actually I'm removing empty strings, as those\\n                        ;; seem to be not useful\\n                        ;;\\n                        ;; most of the pin names are numbers, but some like\\n                        ;; USB-C are symbols\\n                        (λ (x) (string? (pad-spec-name x)))\\n                        (filter pad-spec? specs))]\\n            [text-specs (append (filter text-spec? specs) (list (text-spec 0 0)))]\\n            [hole-specs (filter (λ (x) (string? (pad-spec-name x)))\\n                                (filter pad-spec? specs))])\\n        ;; FIXME no holes for now\\n        (footprint line-specs pad-specs text-specs hole-specs)))))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}