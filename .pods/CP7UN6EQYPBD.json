{
  "id": "CP7UN6EQYPBD",
  "parentId": "CPVMzLibHe9N",
  "index": 2,
  "content": "\"(define (execute-gbr-instructions instructions)\\n  (define FS-x #f)\\n  (define FS-y #f)\\n  (define unit #f)\\n  (define cur-LP #f)\\n  (define cur-aperture #f)\\n  ;; FIXME define aperture data structure\\n  (define-values (add-aperture set-aperture)\\n    (let ([aperture '()])\\n      (values (λ (dcode shape attr)\\n                (set! aperture (cons (list dcode shape attr) aperture)))\\n              (λ (dcode)\\n                (match (assoc dcode aperture)\\n                  [(list _ shape attr)\\n                   (set! cur-aperture (list shape attr))])))))\\n\\n\\n  ;; global setting and aperture registering\\n  (for ([instruction instructions])\\n    (match instruction\\n      [(list 'FS _ x _ y) (set! FS-x x)\\n                          (set! FS-y y)]\\n      [(list 'MO u) (case u\\n                      [(\\\"MM\\\") (set! unit 'mm)]\\n                      [(\\\"IN\\\") (set! unit 'inch)])]\\n      [(list 'AD dcode shape (list attr ...))\\n       (add-aperture dcode shape attr)]\\n      [else #f]))\\n  \\n  (define (xx x)\\n    (/ x (expt 10 FS-x)))\\n  (define (yy y)\\n    (/ y (expt 10 FS-y)))\\n\\n  (define (flash-rectangle dc x y)\\n    (let-values ([(dx dy) (values (first (second cur-aperture))\\n                                  (second (second cur-aperture)))])\\n      ;; (println (~a x y dx dy #:separator \\\" \\\"))\\n      (send dc draw-rectangle\\n            (- x (/ dx 2))\\n            (- y (/ dy 2))\\n            dx\\n            dy)\\n      ;; update bounding box\\n      (update-bounding-box x y (/ dx 2) (/ dy 2))))\\n\\n  (define (flash-ellipse dc x y)\\n    (let-values ([(dx dy) (values (first (second cur-aperture))\\n                                  (second (second cur-aperture)))])\\n      (send dc draw-ellipse\\n            (- x (/ dx 2))\\n            (- y (/ dy 2))\\n            dx\\n            dy)\\n      (update-bounding-box x y (/ dx 2) (/ dy 2))))\\n\\n  (define-values (update-bounding-box get-bounding-box)\\n    (let-values ([(xmax xmin ymax ymin) (values 0 0 0 0)])\\n      (values (λ (x y (dx 0) (dy 0))\\n                (set! xmax (max (+ x dx) xmax))\\n                (set! xmin (min (- x dx) xmin))\\n                (set! ymax (max (+ y dy) ymax))\\n                (set! ymin (min (- y dy) ymin)))\\n              (λ ()\\n                (values xmax xmin ymax ymin)))))\\n\\n  ;; FIXME This draw function is called everytime the picture is\\n  ;; rendered\\n  ;;\\n  (define (draw dc)\\n    (define cur-pos #f)\\n    ;; the default pen is sooooo big\\n    ;; FIXME fixed line width 0.05\\n    (send dc set-pen \\\"black\\\" 0.05 'solid)\\n    ;; for pads\\n    (send dc set-brush \\\"red\\\" 'solid)\\n    (for ([instruction instructions])\\n      (match instruction\\n        [(list 'LP d) (case d\\n                        [(\\\"D\\\") (set! cur-LP 'dark)]\\n                        [(\\\"C\\\") (set! cur-LP 'clear)])]\\n        [(list 'D dcode)\\n         (set-aperture dcode)]\\n        [(list 'XY x y i j d)\\n         (unless cur-aperture\\n           (error \\\"cur aperture not set\\\"))\\n         (case d\\n           ;; Compute min max of x,y during the draw, because I need\\n           ;; to access the current aperture\\n           ;;\\n           ;; FIXME magic number 0.05 repeated\\n           [(1) (update-bounding-box (xx x) (yy y))\\n                (send dc draw-line\\n                      (car cur-pos) (cdr cur-pos)\\n                      (xx x) (yy y))]\\n           [(2) (update-bounding-box (xx x) (yy y))]\\n           ;; flash current aperture\\n           [(3) (let-values ([(dx dy) (values (first (second cur-aperture))\\n                                              (second (second cur-aperture)))])\\n                  ;; I should consider the width and height of the pad. This is\\n                  ;; done in the flash function.\\n                  (update-bounding-box (xx x) (yy y)))\\n                (case (first cur-aperture)\\n                  [(\\\"R\\\") (flash-rectangle dc (xx x) (yy y))]\\n                  ;; FIXME I should flash the ellipse\\n                  [(\\\"O\\\") (flash-ellipse dc (xx x) (yy y))])])\\n         (set! cur-pos (cons (xx x) (yy y)))]\\n        ;; TODO check if this instruction is present at the last\\n        [(list 'M02) \\\"end\\\"]\\n        [else #f])))\\n  \\n  ;; return dc as a pict\\n  (define res (dc (λ (dc dx dy)\\n                    (define old-brush (send dc get-brush))\\n                    (define old-pen (send dc get-pen))\\n                    (define-values (old-x old-y) (send dc get-origin))\\n                    (send dc set-origin dx dy)\\n                    \\n                    (draw dc)\\n                    \\n                    (send dc set-brush old-brush)\\n                    (send dc set-pen old-pen)\\n                    (send dc set-origin old-x old-y))\\n                  0 0))\\n\\n  ;; FIXME get-bounding-box should be called AFTER the drawing\\n  (define-values (xmax xmin ymax ymin) (get-bounding-box))\\n\\n  ;; (println (list xmax xmin ymax ymin))\\n  (values\\n   (inset res\\n          (- 0 xmin) (- 0 ymin) xmax ymax)\\n   (list xmin ymin xmax ymax)))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"execute-gbr-instructions\":false}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}