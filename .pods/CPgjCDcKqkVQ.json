{
  "id": "CPgjCDcKqkVQ",
  "parentId": "CPWtgTBEDKJd",
  "index": 4,
  "content": "\"(define (Composite->place-spec \\n          comp\\n          #:place-nsteps [place-nsteps 50]\\n          #:place-nbins[place-nbins 300]\\n          #:sa-ncycles [sa-ncycles 10]\\n          #:sa-nsteps [sa-nsteps 2000]\\n          #:sa-stepsize [sa-stepsize 10]\\n          ;; theta=0 means disable rotation\\n          #:sa-theta-stepsize [sa-theta-stepsize 0])\\n  (let* ([netlist (Composite->netlist comp)]\\n         [atoms (collect-all-atoms comp)]\\n         [Hatom=>idx (annotate-atoms atoms)]\\n         [diepict (Composite-pict comp)]\\n         [locs (for/list ([atom atoms])\\n                 (match-let\\n                   ([(list x y) \\n                     (or \\n                       (maybe-find cc-find diepict\\n                                   (Atom-pict atom))\\n                       ;; initially place to middle, for better\\n                       ;; visualization\\n                       (list \\n                         (/ (pict-width diepict) 2)\\n                         (/ (pict-height diepict) 2)))]\\n                    [(list a) \\n                     (or (maybe-find \\n                           angle-find diepict \\n                           (Atom-pict atom))\\n                         (list 0))])\\n                   (Point x y a)))])\\n    (let*-values \\n      ([(xs ys as) \\n        (for/lists (l1 l2 l3)\\n          ([loc locs])\\n          (match-let ([(Point x y a) loc])\\n                     (values x y a)))]\\n       [(mask) (for/list ([atom atoms])\\n                 (if (maybe-find cc-find diepict\\n                                 (Atom-pict atom))\\n                     ;; 0 for fixed\\n                     0 1))]\\n       [(ws hs) \\n        (for/lists (l1 l2)\\n          ([atom atoms])\\n          (values (exact->inexact\\n                    (Macro-w (atom->macro atom)))\\n                  (exact->inexact \\n                    (Macro-h \\n                      (atom->macro atom)))))]\\n       ;; DEBUG CAUTION add some margin for better placement result\\n       ;; FIXME how to decide the size? I'll have to use mm or mil as unit\\n       [(ws hs) (values (map (lambda (x) \\n                               (+ x (* (padding-general)\\n                                       (fp-scale)))) ws)\\n                        (map (lambda (x) \\n                               (+ x (* (padding-general)\\n                                       (fp-scale)))) hs))]\\n       [(Es)\\n        ;; Edge is list of nets. Each net is a list of nodes, a node is\\n        ;; (index offx offy)\\n        (for/list ([net netlist])\\n          ;; TODO weight\\n          (for/list ([pin (Net-pins net)])\\n            (let* ([atom (Pin-parent pin)]\\n                   ;; FIXME pin index might be symbol\\n                   [pin-name (Pin-name pin)]\\n                   [macro (atom->macro atom)]\\n                   [offset (hash-ref (Macro-Hlocs macro) pin-name)])\\n              (list (hash-ref Hatom=>idx atom)\\n                    (exact->inexact (Point-x offset))\\n                    (exact->inexact (Point-y offset))))))])\\n      (hash 'xs xs\\n            'ys ys\\n            'as as\\n            'ws ws\\n            'hs hs\\n            'Es Es\\n            'diearea \\n            (list (pict-width diepict)\\n                  (pict-height diepict))\\n            'place-params \\n            (hash 'place-nsteps place-nsteps\\n                  'place-nbins place-nbins\\n                  'sa-ncycles sa-ncycles\\n                  'sa-nsteps sa-nsteps\\n                  'sa-stepsize sa-stepsize\\n                  'sa-theta-stepsize sa-theta-stepsize)\\n            'mask mask\\n            ;; initial empty conflicts. This will only be fill by the placement\\n            ;; engine\\n            'conflicts '()))))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"Composite->place-spec\":true}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}