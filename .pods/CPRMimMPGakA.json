{
  "id": "CPRMimMPGakA",
  "parentId": "CPeFXHDVER93",
  "index": 2,
  "content": "\"(define (Composite->kicad-pcb comp place-spec)\\n  \\\"Generate .kicad_pcb.\\\"\\n  ;; 1. collect all atoms\\n  (match-let* \\n    ([xs (hash-ref place-spec 'xs)]\\n     [ys (hash-ref place-spec 'ys)]\\n     [as (hash-ref place-spec 'as)]\\n     [(list diex diey) (hash-ref place-spec 'diearea)]\\n     ;; CAUTION I have fp-scaling here and there, need to clean them up\\n     [(list diex diey) (list (/ diex (fp-scale))\\n                             (/ diey (fp-scale)))]\\n     [atoms (collect-all-atoms comp)]\\n     [Hatom=>index (for/hash ([atom atoms]\\n                              [i (in-naturals 1)])\\n                             (values atom i))]\\n     [die (Composite-pict comp)]\\n     ;; net\\n     ;; 1. get a list of nets\\n     [nets (Composite->netlist comp)]\\n     ;; 2. assign names for the nets\\n     [Hnet=>index (for/hash ([net nets]\\n                             ;; CAUTION the net 0 is special, and must have ID \\\"\\\"\\n                             [i (in-naturals 1)])\\n                            ;; I'll probably want to assign VCC and GND for\\n                            ;; powerplane. Maybe just GND for now\\n                            (values net i))]\\n     ;; 3. get a map from atom pin to nets\\n     [Hpin=>net (for*/hash ([net nets]\\n                            [pin (Net-pins net)])\\n                           (values pin net))]\\n     ;; atom position\\n     [Hatom=>loc (for/hash ([atom atoms]\\n                            [x xs]\\n                            [y ys]\\n                            [a as])\\n                           (values atom (Point x y a)))])\\n    ;; 2. generate!\\n    `(kicad_pcb \\n       ,@(kicad-pcb-prefix\\n           ;; I actually already have the size of the board. Looks like\\n           ;; KiCAD does not respect these values\\n           (/ (pict-width die) (fp-scale))\\n           (/ (pict-height die) (fp-scale)))\\n         ;; FIXME TODO add netlist\\n         ;; 4. add the nets declaration\\n         ,@(for/list ([i (hash-values Hnet=>index)])\\n             ;; FIXME the name PLACEHOLDER?\\n             `(net ,i\\n                   ,(number->string i)))\\n           ,@(for/list ([atom atoms])\\n               (match-let\\n                 ([(Point x y a) \\n                   (fix-atom-xy\\n                     atom (hash-ref Hatom=>loc atom))])\\n                 ;; 5. attach proper net information for the components\\n                 (atom->fp-sexp atom\\n                                x y a\\n                                (atom->ID atom Hatom=>index)\\n                                ;; hash tables\\n                                Hpin=>net Hnet=>index)))\\n\\n             ;; TODO add edge cut layer\\n             ;;\\n             ;; FIXME I can actually use (/ (pict-width die) (fp-scale)) to\\n             ;; compute diex. Need to verify they have the same value\\n             (gr_line (start 0 0) (end ,diex 0) \\n                      (layer Edge.Cuts) (width 0.1))\\n             (gr_line (start ,diex 0) (end ,diex ,diey) \\n                      (layer Edge.Cuts) (width 0.1))\\n             (gr_line (start ,diex ,diey) (end 0 ,diey) \\n                      (layer Edge.Cuts) (width 0.1))\\n             (gr_line (start 0 ,diey) (end 0 0) \\n                      (layer Edge.Cuts) (width 0.1)))))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"Composite->kicad-pcb\":true}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}