{
  "id": "CPBmgyBGCdqD",
  "parentId": "CPHXAGdqGGDF",
  "index": 2,
  "content": "\"(define (circuit->pict comp \\n                       ;; by default, use initial place\\n                       [place-spec (Composite->place-spec comp)])\\n  ;; 1. draw the macro of each atoms on the right location\\n  (let* ([xs (hash-ref place-spec 'xs)]\\n         [ys (hash-ref place-spec 'ys)]\\n         [as (hash-ref place-spec 'as)]\\n         [conflicts (map sub1 (hash-ref place-spec 'conflicts))]\\n         [atoms (collect-all-atoms comp)]\\n         ;; create an empty rectangle because the pict might contains extra\\n         ;; drawings that are intended for debugging\\n         [die (rectangle (pict-width (Composite-pict comp))\\n                         (pict-height (Composite-pict comp)))]\\n         ;; atom position\\n         [Hatom=>loc (for/hash ([atom atoms]\\n                                [x xs]\\n                                [y ys]\\n                                [a as])\\n                               (values atom (Point x y a)))]\\n         ;; pin positions\\n         [Hpin=>xy\\n           (for/hash ([pin (collect-all-pins comp)])\\n             (let* ([atom (Pin-parent pin)]\\n                    [pinname  (Pin-name pin)]\\n                    [macro (atom->macro atom)]\\n                    [offset (hash-ref (Macro-Hlocs macro)\\n                                      pinname)])\\n               (match-let ([(Point x y a) \\n                            (fix-atom-xy-pin\\n                              atom \\n                              (hash-ref Hatom=>loc atom)\\n                              offset)])\\n                          (values pin (list x y)))))])\\n    (debug \\\"Number of conflicts:\\\" (length conflicts))\\n    (let ([res (for/fold ([die die])\\n                 ([atom atoms]\\n                  [i (in-naturals)]\\n                  [x xs]\\n                  [y ys]\\n                  [a as])\\n                 (let* ([m (atom->macro atom)]\\n                        [w (Macro-w m)]\\n                        [h (Macro-h m)]\\n                        [p (atom->fp-pict atom)]\\n                        [p (if (member i conflicts)\\n                               (frame p #:color \\\"red\\\")\\n                               p)])\\n                   (pin-over-cc die x y (rotate p a))))])\\n      ;; Draw airwires.  Construct graph using racket's graph library, and find\\n      ;; MST with distance as weights\\n      (let* ([g (Composite->graph comp Hpin=>xy)]\\n             [edges (min-st-kruskal g)])\\n        (let ([final-res \\n                (for/fold ([res res])\\n                  ([edge edges])\\n                  (let ([src (first edge)]\\n                        [dst (second edge)])\\n                    (match-let \\n                      ([(list x1 y1) (hash-ref Hpin=>xy src)]\\n                       [(list x2 y2) (hash-ref Hpin=>xy dst)])\\n                      ;; however, pip-line does not support styling\\n                      ;; (pin-over res x1 y1 (pip-line (- x2 x1) (- y2 y1) 0))\\n                      (let ([src-p (circle 0)]\\n                            [dst-p (circle 0)])\\n                        (pin-line \\n                          (pin-over-cc\\n                            (pin-over-cc res x1 y1 src-p)\\n                            x2 y2 dst-p)\\n                          src-p cc-find\\n                          dst-p cc-find\\n                          #:style 'long-dash)))))])\\n          ;; scale it down\\n          (let* ([w (pict-width final-res)]\\n                 [h (pict-height final-res)]\\n                 [factor (min 1 (/ 640 w) (/ 480 h))])\\n            (scale final-res factor)))))))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"circuit->pict\":true}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}