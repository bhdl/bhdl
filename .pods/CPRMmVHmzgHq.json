{
  "id": "CPRMmVHmzgHq",
  "parentId": "CPHXAGdqGGDF",
  "index": 3,
  "content": "\"(define (circuit-export\\n          circuit\\n          ;; CAUTION auto-place requires backend placement engine running\\n          ;; and takes time\\n          #:auto-place [auto-place #f]\\n          #:use-cache [use-cache #f]\\n          ;; formats is a list of symbols from '(kicad pdf dsn ses)\\n          ;;\\n          ;; CAUTION ses requires freerouting.jar and takes time\\n          ;;\\n          ;; TODO BOM PLACE\\n          #:formats [formats '(pdf kicad dsn bom)])\\n  ;; this function will return the picture to show in console\\n  (when (not (directory-exists? (current-directory)))\\n    (make-directory* (current-directory)))\\n  (let* ([place-spec (Composite->place-spec\\n                       circuit\\n                       #:place-nsteps 50\\n                       #:place-nbins 300\\n                       ;; When cycle increases, the temperature cools down,\\n                       ;; and the later cycles are not very useful to\\n                       ;; remove conflicts. Thus, for this application, I\\n                       ;; might consider using only the first few cycles,\\n                       ;; and use a large number of steps (per cycle)\\n                       #:sa-ncycles 10\\n                       #:sa-nsteps 3000\\n                       #:sa-stepsize 10\\n                       ;; to support rotation, use non-0 e.g. 0.3\\n                       #:sa-theta-stepsize 0)]\\n         [place-result \\n           (case auto-place\\n             [(#t) \\n              (let ([fname \\\"place-result.json\\\"])\\n                (cond\\n                  [(and (file-exists? fname) use-cache)\\n                   (debug \\\"loading ..\\\")\\n                   (call-with-input-file \\n                     fname\\n                     (λ (in)\\n                        (string->jsexpr \\n                          (port->string in))))]\\n                  [else (begin\\n                          (debug \\\"sending for placement ..\\\")\\n                          (let ([res (send-for-placement\\n                                       place-spec)])\\n                            (debug \\\"saving ..\\\")\\n                            (call-with-output-file \\n                              fname\\n                              (λ (out)\\n                                 (write-string \\n                                   (jsexpr->string res) out))\\n                              #:exists 'replace)\\n                            res))]))]\\n             [else place-spec])])\\n    ;; save place spec\\n    (save-for-placement place-spec \\\"place-spec.json\\\")\\n    (when (member 'kicad formats)\\n      (displayln \\\"generating KiCAD PCB ..\\\")\\n      (call-with-output-file\\n        \\\"out.kicad_pcb\\\"\\n        #:exists 'replace\\n        (λ (out)\\n           (pretty-write\\n             (Composite->kicad-pcb circuit place-result)\\n             out)))\\n      (displayln (~a \\\"link: \\\" (current-directory) \\\"out.kicad_pcb\\\")))\\n    (when (member 'bom formats)\\n      (displayln \\\"Generating BOM ..\\\")\\n      ;; loop through all atoms, and print their ID and attrs into a txt file\\n      (call-with-output-file \\n        \\\"BOM.csv\\\"\\n        #:exists 'replace\\n        (λ (out)\\n           (display\\n             (Composite->BOM circuit)\\n             out))))\\n    (when (member 'pos formats)\\n      (warn \\\"POSITION file not implemented\\\"))\\n    (define the-pict (circuit->pict circuit place-result))\\n    (when (member 'pdf formats)\\n      (displayln \\\"generating pdf ..\\\")\\n      (save-file the-pict \\\"out.pdf\\\")\\n      (displayln (~a \\\"link: \\\" (current-directory) \\\"out.pdf\\\")))\\n    (when (member 'png formats)\\n      (save-file the-pict \\\"out.png\\\")\\n      (displayln (~a \\\"link: \\\" (current-directory) \\\"out.png\\\")))\\n    (when (member 'svg formats)\\n      (save-file the-pict \\\"out.svg\\\")\\n      (displayln (~a \\\"link: \\\" (current-directory) \\\"out.svg\\\")))\\n    (when (member 'dsn formats)\\n      (displayln \\\"generating Spectre DSN ..\\\")\\n      (call-with-output-file \\n        \\\"out.dsn\\\"\\n        #:exists 'replace\\n        (λ (out)\\n           (pretty-write\\n             (Composite->dsn circuit place-result)\\n             out)))\\n      (displayln (~a \\\"link: \\\" (current-directory) \\\"out.dsn\\\")))\\n    (when (member 'ses formats)\\n      (displayln \\\"invoking freerouting ..\\\")\\n      ;;           \\\"-1.4.4-executable.jar\\\"\\n      (let ([success? (shell \\\"freerouting -de out.dsn -do out.ses -mp 10\\\")])\\n        (displayln (~a \\\"freerouting succeeded? \\\" success?))\\n        (when success?\\n          (displayln (~a \\\"link: \\\" (current-directory) \\\"out.ses\\\")))))\\n    the-pict))\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"circuit-export\":true}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}