{
  "id": "CPGHh3CbVz4n",
  "parentId": "CP6M6tV7VJkb",
  "index": 2,
  "content": "\"(define (make-IC-atom ic which-fp attrs)\\n  (let* ([fpspec (ic-select-fpspec ic which-fp)]\\n         [pins (FpSpec-pins fpspec)]\\n         [alts (IC-alts ic)])\\n    ;; this is alts extended with all pins not recorded in original alts\\n    (let ([alts (append (map list (set-subtract pins (flatten alts)))\\n                        alts)])\\n      (let ([comp (ICAtom (make-hash) ic which-fp attrs)])\\n        ;; HACK is all the atoms are ICAtom, and all created here, I can just activate the hashcode here.\\n;;         (debug \\\"make-ICAtom\\\" (eq-hash-code comp))\\n        (eq-hash-code comp)\\n        ;; each alt group\\n        (for ([alt alts]\\n              [pin-index (in-naturals 1)])\\n          (let* ([pin-name (string->symbol (~a \\\"index-\\\" pin-index))]\\n                 ;; TODO I actually want to create pins with the order of FpSpec-pins\\n                 [p (Pin comp pin-name)])\\n            ;; each pin name in the alt group\\n            (hash-set! (Atom-pinhash comp) pin-name p)\\n            (for ([a alt])\\n              (hash-set! (Atom-pinhash comp) a p))))\\n\\n        ;; get the footprint and assign the footprint pin name to hash as well\\n        (when (IC-left ic)\\n          (hash-set! (Atom-pinhash comp)\\n                     'left\\n                     (hash-ref (Atom-pinhash comp) (IC-left ic))))\\n        (when (IC-right ic)\\n          (hash-set! (Atom-pinhash comp)\\n                     'right\\n                     (hash-ref (Atom-pinhash comp) (IC-right ic))))\\n\\n        ;; the fp names\\n        ;;\\n        ;; FIXME well, why do I need to fp names?\\n        ;;\\n        ;; Because when generating KiCAD file, I need to figure out which pad is\\n        ;; connected to which net.\\n        (let ([pad-names (filter-not string? (map pad-spec-name (footprint-pads (FpSpec-fp fpspec))))])\\n          \\n          (or (= (length pins) (length pad-names))\\n              (begin\\n               (debug \\\"IC-name:\\\" (IC-name ic)\\n                      \\\"\\\\npins:\\\"\\n                     pins\\n                     \\\"\\\\npad names:\\\"\\n                     pad-names)\\n               ;; pairing them up\\n               (pretty-print (for/list ([i (in-range (max (length pins) (length pad-names)))]\\n                                 [pin (append pins (make-list (length pad-names) \\\"\\\"))]\\n                                 [pad (append pad-names (make-list (length pins) \\\"\\\"))])\\n                                (cons pin pad)))\\n               (error \\\"pins and pad-names do not match: \\\"\\n                     (length pins) (length pad-names))))\\n          ;; printing pairs for debugging\\n;;           (debug \\\"IC-name:\\\" (IC-name ic)\\n;;                  \\\"\\\\npairs:\\\"\\n;;                  (map cons pins pad-names))\\n          (for ([pin pins]\\n                [pad pad-names])\\n            (hash-set! (Atom-pinhash comp)\\n                       (string->symbol (~a \\\"fp-\\\" pad))\\n                       (hash-ref (Atom-pinhash comp) pin))))\\n\\n        ;; return the created Atom instance\\n        (set-default-pict! comp)\\n        comp))))\"",
  "column": 1,
  "fold": true,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "imports": "{}",
  "exports": "{\"make-IC-atom\":true}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}