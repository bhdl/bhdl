#+TITLE: Implementation Notes

* For Arxiv and first release, July
** TODO fitboard

- [X] the pict shape is roughly done
- [X] wire things up
- [X] write a version to place diode at fixed location
- [-] pick the MCU and firmware
  - [X] bluetooth and RF?
  - [ ] battery and (fast) charging circuit?
- [X] connect everything
- [-] connect LEDs?
- [-] case CAD co-design?

*** TODO place USB, SoCs, LEDsat some proper position
*** TODO run auto-placer
*** STARTED stablizer and other mouting holes
*** STARTED Kahl hot swappable socket
which might have to go back side of the PCB, and must align with the switch
socket

Mechanical Keyboard Switches Kailh PCB Socket
- [[https://www.kailhswitch.com/mechanical-keyboard-switches/box-switches/mechanical-keyboard-switches-kailh-pcb-socket.html][offical product link]]
- [[https://www.kailhswitch.com/uploads/201815927/PG151101S11.pdf][datasheet]]
- CPG151101S11

*** STARTED double-check footprint for manufacturing

*** CANCELED pin headers for GD32 and ESP32 for debugging
CLOSED: [2020-07-30 Thu 01:18]
*** CANCELED other pins for debugging?
CLOSED: [2020-07-30 Thu 01:18]

** TODO paper writing

*** syntax
*** semantics
*** system
*** evaluation and case study

* Reference
** cite:gd32vf103xxxx-datasheet
- user manual: cite:gd32vf103xxxx-manual

All voltage must be 3.3V for GD32VF103

VDD                     ; external voltage range
VDDA                    ; external analog supply voltage
VBAT                    ; external battery voltage
VIN                     ; input voltage, this is 5V tolerant
NRST                    ; external reset

;; Historically,
;; In BJT, Vcc means collector, Vee stands for emitter
;; In FET, Vdd means drain, Vss stands for source
;; Now, Vcc=Vdd=, Vee=Vss

** cite:esp32-wrover-e
- cite:esp32-tech-ref
- cite:esp32-datasheet


* Not-so-urgent issues
** detailed placement minor issues
Some conflicts are not counted in the placement engine.

** place on back side
** native library management (instead of adapting KiCAD libraries)
** TODO Visual programming
** STARTED [#A] software library
- vectorized connections
- frequently used components
  - filtering capacitor
  - ICSP header
  - USB connector

** TODO library-IC support value
- support values for different component.
  - [-] The regular components may have values, e.g. resistance and tolerance. But
    this is not very necessary to get manufacturing right, because they share
    footprints.
    - delayed for now, not necessary for correct PCB generation
  - [X] connectors are even more tricky: the footprints are different with different
    pin counts.
    - I turn out to create separate ICs for PinHeaders with diffferent pin counts

** TODO Use bhdl-footprints submodule repo
and unify the different footprints into the hierarchy based on different repo

** TODO unify fp.rkt and library-IC.rkt

** Better surface
*** TODO layout language
*** TODO layout use real units (e.g. mm)
*** DONE make-circuit to hide Atom and Composite
CLOSED: [2020-07-30 Thu 01:17]
*** better visualization interface
*** simpler connect syntax
I probably don't need =*+=

- =*-=
- ~*=~
- =*<=

*** DONE better exporting wrapper
CLOSED: [2020-07-30 Thu 01:17]


* TODO-list Summer

** DONE [#A] better schematic and footprint libraries
CLOSED: [2020-07-30 Thu 01:41] SCHEDULED: <2020-06-30 Tue>

** [#A] write some boards
SCHEDULED: <2020-06-30 Tue>

- [X] arduino uno
- [ ] lichee nano
- [X] gh60: https://github.com/komar007/gh60
- [ ] pyboard
- [ ] linux business card
- [X] spreadboard
- [ ] a K210 board

*** other
- [X] ergonomic (hebi) keyboard

* Reference
** JITX HN discussion
https://news.ycombinator.com/item?id=17654865

Quoting hwillis:

#+begin_quote
Prototyping is an excellent application. Whats your support roadmap look like?
Add more chips so you can continue making small widgets cheaply? Any plans to
get into higher-risk design work? If you can reliably deliver high
frequency/radio designs near FCC limits, that frees up a lot of RF
engineers. For anyone who doesn't know, the cost to navigate FCC regulations is
huge, and testing is worse (10k tests with months of wait, worst case). Probably
even more people would be interested in high power designs, given the surging
popularity of lithium personal transport and vehicles. Mains voltage/mixed
signal designs would also be huge, but that's a whole other kettle of bears. I'm
sure you've got internal metrics tracking what you all spend the most time doing
and where you're bottlenecking. Even past the huge tasks of advanced engineering
there are opportunities to integrate with 3d printing, automated enclosure or
laser-cut design. I suspect/hope at some point in the future you guys will be
hiring a LOT of people!

I'd love more examples, even on the front page. As long as they're relatively
dense, readable and well-laid they'll inspire a lot of trust in engineers. Also,
I think test fixturing is a strong asset and you guys should feature it more
heavily! I'm not sure how you guys do it, but I'd love to see real examples. It
might be the best suited automation of the things you guys do. Designing a
comprehensive test fixture can take almost as long as designing the actual part,
but with the basic functionality defined you could generate test routines,
circuits, firmware, and jigs automatically. And my favorite kind of test jig
looks like this[1], so gerbers are all I need to be happy.
#+end_quote

* TODO-list

** TODO save plot during placement

** research problems

1. connect GUI editing with programming
2. placement and routing for human reading
3. abstraction of general components, e.g. crystal, filter capacitors
4. make module-level connections standing out
5. more functional way instead of (hook!)
6. syntax for in-place component creation
7. in schematic, kicad allows you to annotate text on line. However, it is hard
   to see where are all those matched texts.
8. developing Kicad itself can make it more powerful and easier to use. E.g. add
   abstraction capability, add highlighting of matched annotations. However,
   developing kicad is challenging, it has too much code and complexity.
9. vectorrized syntax
10. compiler checking: pin conflicts, filter capacitors, power track
    requirements
11. auto P&R specific issues for PCB:
   - power track
   - signal matching

*** connect hardware programming with software programming

** Why (additional advantages)
Make it clear the modules. You cannot see clearly from the schematic the
hierarchy of the components. E.g. the reset circuit, usb module are tangled
together.

No more number assignment like R5, it is compiler details.


** Gerbers
*** gerber generation
**** design rules
*** IC->gerber add connections

Export a airwire connections onto the gerber file

* Library Design

A variant of a component should have a symbol and one or more footprints. The
pin name should be the same, and the indexes of pins shall be consistent. For
footprint, it is fairly standard, just choose from one of the packagings. For
symbols, we should also specify the orientation and grouping of pins.

Of course, we can use the footprint directly as the symbol. However, there are
problems:
1. there may be many footprints for one symbol, which one to use?
2. the pin order in the footprint is not necessary optimal from symbol point of
   view, e.g. A0-A7 may not be located together.
3. the schematic view should better be kept consistent with kicad

And reading directly the Kicad library is not ideal:
1. there is overhead to filter the important ones from kicad library
2. kicad library is hard to maintain, and reply on external python script to
   generate. It is the right way to integrate that script into our system. Well,
   tons of scripts:
   - https://github.com/pointhi/kicad-footprint-generator
   - https://github.com/kicad/kicad-library-utils

** schematic symbol

I'm not going to read kicad library file, because I need heuristics to
determine groups, and that's not maintainable

Different varaints have different number of pins, different packaging, and
different pin number

*** TODO negative signal (e.g. ~RESET)

** footprints
Well, actually footprint is another story. I need to get the exact position of
pads, and borders. That's hard to maintain afterall. Kicad footprint library is
pretty good, and I'm using it.

** Reference
Some Kicad library documentations are very useful:
- https://kicad-pcb.org/libraries/klc/: KiCad Library Convention

And the real schematic and footprint libraries:
- https://github.com/kicad/kicad-symbols
- https://github.com/KiCad/kicad-footprints

Of course, the library editor is inside Kicad source code:
- https://github.com/KiCad/kicad-source-mirror



* DONE-list

** DONE Julia and Racket interop
CLOSED: [2020-04-13 Mon 19:05]
*** build juila code into a static binary
Although the startup overhead will be reduced, I don't feel this is the best
option compared to client-server architecture.
*** DONE run Julia code as server
CLOSED: [2020-04-13 Mon 19:04]
What kind of server architecture? Raw socket? Or Http server?

- [[https://github.com/JuliaWeb/HTTP.jl][JuliaWeb/HTTP.jl]]: seems to be more mature, try this first.
- [[https://github.com/JuliaWeb/JuliaWebAPI.jl][JuliaWeb/JuliaWebAPI.jl]]: this is interesting, it wraps a julia function as a
  remote callable API.

And I should probably write local files and send filename via POST HTTP request
instead of sending all data via HTTP payload. The result should probably also be
a local filename.  *But* for a remote server, I still need to send the whole
file, so just do a whole file as payload.

In a word, use *HTTP.jl* to start a remote server that handles HTTP POST
request, and response the result file. Hopefully doing this async.

** lef/def and RePlAce
*** DONE connect lef with def
CLOSED: [2020-04-02 四 18:31]
*** DONE visualize lef/def
CLOSED: [2020-04-02 四 18:31]
*** CANCELED read academic benchmark ISPD05 and convert to lef/def
CLOSED: [2020-04-02 四 19:33]
*** DONE generate lef/def for my PCB
CLOSED: [2020-04-03 五 17:18]
*** DONE verify RePlAce performance on my PCB
CLOSED: [2020-04-03 五 18:15]

It crashed. How then? It is pretty much impossible to debug RePlAce code. Maybe
restart my own placement code?

*** DONE place.jl use lef/def and debug on my small scale
CLOSED: [2020-04-13 Mon 19:05]

** TODO use VLSI placement benchmarks
*** DONE figure out the format of ISPD benchmarks
CLOSED: [2020-03-16 一 21:05]
*** DONE run existing placers
CLOSED: [2020-03-16 一 21:05]
- [[https://github.com/limbo018/DREAMPlace][limbo018/DREAMPlace]]
- RePIAce code: [[https://github.com/The-OpenROAD-Project/RePlAce][The-OpenROAD-Project/RePlAce]]
- [[https://github.com/The-OpenROAD-Project/OpenROAD][The-OpenROAD-Project/OpenROAD]]: an umbrella project contains placers and
  routers as submodules

*** DONE read ISPD 05/06 benchmarks
CLOSED: [2020-03-16 一 22:03]
*** DONE visualization
CLOSED: [2020-03-17 二 00:39]

*** Implement other placers
- KraftWerk
- Capo
- mPL
- APlace
- FastPlace
- NTUplace3
- SimPL
- Eplace

** DONE constraint optimization
CLOSED: [2020-04-13 Mon 19:07]
*** whether this is mixed-size placement?
*** figure out PCB input format
*** generate a simple PCB input file
*** implement some placement algorithm
*** import back

** CANCELED Libraries
CLOSED: [2020-04-13 Mon 19:19]
- define all popular libraries
- compose them together
- write visualization and gerber generation for comp-IC
- assign footprint
** CANCELED kicad symbol library
CLOSED: [2020-04-29 Wed 19:22]
- visualization
- API

For kicad symbol library, the only thing I care about is actually the "pinname
to index" mapping, which is consistent with kicad footprint pin index for
different packagings.

However, different packaging should have different pin index, but one symbol can
have many footprints. How is that possible?

** DONE visualize of placement result on racket side
CLOSED: [2020-04-18 Sat 18:30]

** DONE Unified Libraries
CLOSED: [2020-05-05 Tue 17:32]
- https://github.com/Digi-Key/digikey-kicad-library

*** DONE schematic symbol library
CLOSED: [2020-05-05 Tue 17:32]
- kicad official library should be enough (UPDATE: no)

*** DONE PCB footprint library
CLOSED: [2020-05-05 Tue 17:32]

** auto placement
*** DONE for footprint
CLOSED: [2020-05-05 Tue 21:07]
*** DONE for symbols
CLOSED: [2020-05-05 Tue 21:07]

** Random
*** DONE footprint coordinates system mismatch
CLOSED: [2020-05-06 Wed 13:46]

*** DONE new hook syntax
CLOSED: [2020-05-07 Thu 16:05]
Or maybe I don't need syntax for now.

*** DONE how did we get all the connections?
CLOSED: [2020-05-07 Thu 16:05]
1. collect all reachable Composite through pins parent
2. get all connections stored in these Composite

So this already take all connections, as long as that connection is recorded in
some reachable Composite

*** DONE In place.rkt, the macro and macro pins should be unified with library as well
CLOSED: [2020-05-06 Wed 16:55]
specifically, the pin index of ICAtom might not be numbers, but symbols


*** DONE assign fixed locations
CLOSED: [2020-05-09 Sat 20:19] SCHEDULED: <2020-05-08 Fri>
*** DONE in-place part creation and corresponding syntax
CLOSED: [2020-05-09 Sat 20:19] SCHEDULED: <2020-05-08 Fri>
*** DONE gh60
CLOSED: [2020-05-09 Sat 20:19] SCHEDULED: <2020-05-08 Fri>
*** DONE a little mismatch of placed fixed positions
CLOSED: [2020-05-12 Tue 14:35]
*** DONE auto-visualization scale
CLOSED: [2020-05-12 Tue 15:11]
And use the real footprint size

*** DONE placement engine wirelength
CLOSED: [2020-05-12 Tue 15:11]

*** DONE fixed diearea?
CLOSED: [2020-05-12 Tue 15:11]
** DONE fixed positions
CLOSED: [2020-05-09 Sat 20:18]

** DONE placement engine efficiency
CLOSED: [2020-06-28 Sun 14:20]
In density computation, the rho_cells have large matrix operation. Use GPU makes
it much faster.

*** DONE also precompile the julia code
CLOSED: [2020-06-28 Sun 14:20]

** CANCELED work for both GPU and CPU
CLOSED: [2020-06-27 Sat 11:53]
** DONE performance of placement engine, again
CLOSED: [2020-06-28 Sun 22:45]
** CANCELED weighted nets
CLOSED: [2020-06-28 Sun 22:45]
I actually do not need any weight. More specifically, I don't need the diodes to
be exactly near the switches.

But I need weights to put filtering capacitors close to the component.

** DONE detailed placement and legalization
CLOSED: [2020-06-29 Mon 21:02] SCHEDULED: <2020-06-27 Sat>
I prefer to get this and global placement into one pass.
*** DONE [#A] cite:2008-Book-Alpert-Handbook Handbook of Algorithms for VLSI Physical Design Automation

*** TODO consider the offset of pins
*** consider double side placement and physical conflicts
- and through-hole component is special
- some components can overlap, e.g. cherry switch and LED, because there're LED
  holes
*** consider non-overlapping of copper layer
*** rotation of components

** DONE export kicad compatible netlist
CLOSED: [2020-06-29 Mon 22:47] SCHEDULED: <2020-05-12 Tue>

But this would require compatibility with kicad symbol and footprint library.

UPDATE actually I'm using kicad footprints, so it's quite easy to make pcbnew
compatible netlist. Then I'll be able to take care of the routing there
manually. This is the work tomorrow.

*** DONE components
CLOSED: [2020-05-13 Wed 22:24]
*** DONE netlist
CLOSED: [2020-06-29 Mon 22:48]

*** DONE position is a little off
CLOSED: [2020-06-30 Tue 15:50]
maybe the corner/center coordinate system, or the fp-scale of pict

That is because the origin of the kicad footprint is not the center or corder.
*** TODO remove all overlapping, or report it out
*** TODO And read back edited results?

** DONE Auto-Routing
CLOSED: [2020-06-30 Tue 13:55]

Free routing seems to work. However, some footprints seems to be problematic:
- footprint itself is clapsed together
- still overlapping
- non overlapping on the placement results, but overlaps in kicad due to some
  tiny mismatch

After all, there's not a lot of boards. I can route them manually for now.

*** DONE [#A] dsn generation
CLOSED: [2020-07-02 Thu 01:16]
I need the dsn file. I can get it via KiCAD, but I need to see if KiCAD provides
cmd tool for that. Or I can export dsn file.
*** DONE [#A] integrate freerouting CMD tool
CLOSED: [2020-07-02 Thu 01:20]
The current version has CMD tool broken. I found [[https://github.com/freerouting/freerouting/commit/752065ae22e6533bc9f92a2b027f45803f19cfd5][commit 752065a]] has CMD working.

UPDATE well, the newest version (1.4.4) actually works. The one comes with
layouteditor does not work. The command line to use is

#+begin_example
-de input.dsn -do output.ses -mp 5
#+end_example

where -mp 5 is the number of passes to run.

*** TODO integrate with Youbiao's router

** DONE [#A] better positioning
CLOSED: [2020-07-11 Sat 19:09]
Positioning without exposing to =pict= library, and support for rotation

*** DONE rotation for fixed position
CLOSED: [2020-07-11 Sat 02:38]

Actually,the fixed position should be readily exported to KiCAD, with some fix
of origin offset.

**** DONE hide pict for positioning
CLOSED: [2020-07-10 Fri 21:21]
I have no choice but to do this. Rotation can not be discovered by cc-find.
*** DONE rotation for SA detailed placement
CLOSED: [2020-07-11 Sat 19:09]

The SA placement seems to be problematic. It shows 4 conflicts, but there are
are actually many conflicts. Maybe try to enlarge the w and h during placement.

*** DONE deterministic placement
CLOSED: [2020-07-11 Sat 19:09]
**** deterministic
**** TODO incremental
*** TODO double side placement (just specify the side)

** Make it happends

*** DONE Make spreadboard
CLOSED: [2020-07-30 Thu 01:20]
**** DONE library
CLOSED: [2020-07-12 Sun 14:46]

load and adapt all the libraries:
- Uno R3
- Nano
- Pro mini
- sparkfun pro micro
- MKR

I'll define the Arduinos as IC.

Headers:
- jump headers: 2x3 or two 1x3 group
- external headers: 1x6 1x8 1x10

**** DONE connections
CLOSED: [2020-07-30 Thu 01:20]
**** DONE layout
CLOSED: [2020-07-30 Thu 01:20]

*** CANCELED Make a K210 development board
CLOSED: [2020-07-30 Thu 01:20]

** DONE vectorized connections
CLOSED: [2020-07-30 Thu 01:20]

* A better library management

The user or other developers should be able to add more libraries easily. The
library most consist of footprint drawing and pin orders for each footprint. I
do not intend to offer ability to drawings, because that's quite tedius and
requires exact precision. Instead, all footprint drawings are imported from
KiCAD or EasyEDA.

I should not distinct between ICs and regular components like resistors. The
definition of a component should declare what are the available footprints.

** DONE Allow assigning of footprints during component creation
CLOSED: [2020-07-31 Fri 01:21]

- [X] support multiple footprints
- [X] support assiging footprint

** DONE unify Composite and Atom into Circuit
CLOSED: [2020-07-29 Wed 23:44]

** DONE use LCSC component ID to download easyEDA footprint on-demand
CLOSED: [2020-07-30 Thu 01:32]
Probably read the footprint for pin names and order

A sample API:

Where can I find the UUID =bfea62e0aaf64b3aba6360fe64400713=?

LED-SMD_4P-L1.6-W1.5-BR
https://easyeda.com/api/components/bfea62e0aaf64b3aba6360fe64400713

LED-ARRAY-SMD_4P-L1.6-W1.5-BR
https://easyeda.com/api/components/7d676f53ad0e474a89bb57a5656698b3

https://easyeda.com/api/components/b6b9f937b1274110af7dee0a2e20c6a6

https://easyeda.com/api/components/3e67c3e3b97b4ff38f0c80567ed48498

I probably want to use products API since it does not require MD5 hash, but LCSC
part number. The response contains the UUID of symbol and footprint.

https://easyeda.com/api/products/C440457/svgs

Or use the CN site:

https://lceda.cn/api/products/C114587/svgs

** Other footprint providers
- Mouser uses https://www.samacsys.com
- SnapEDA https://www.snapeda.com

But these are not very open.

