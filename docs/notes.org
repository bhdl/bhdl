#+TITLE: Implementation Notes


* TODO-list

** STARTED write some boards

- arduino uno
- lichee nano
- gh60: https://github.com/komar007/gh60
- pyboard
- linux business card

*** other
- ergonomic (hebi) keyboard

** TODO detailed placement and legalization
** TODO fixed positions
** TODO Auto-Routing

** Tmp
*** assign footprints
*** assign fixed locations
*** In place.rkt, the macro and macro pins should be unified with library as well
specifically, the pin index of ICAtom might not be numbers, but symbols

** Gerbers
*** gerber generation
**** design rules
*** IC->gerber add connections

Export a airwire connections onto the gerber file

* Library Design

A variant of a component should have a symbol and one or more footprints. The
pin name should be the same, and the indexes of pins shall be consistent. For
footprint, it is fairly standard, just choose from one of the packagings. For
symbols, we should also specify the orientation and grouping of pins.

Of course, we can use the footprint directly as the symbol. However, there are
problems:
1. there may be many footprints for one symbol, which one to use?
2. the pin order in the footprint is not necessary optimal from symbol point of
   view, e.g. A0-A7 may not be located together.
3. the schematic view should better be kept consistent with kicad

And reading directly the Kicad library is not ideal:
1. there is overhead to filter the important ones from kicad library
2. kicad library is hard to maintain, and reply on external python script to
   generate. It is the right way to integrate that script into our system. Well,
   tons of scripts:
   - https://github.com/pointhi/kicad-footprint-generator
   - https://github.com/kicad/kicad-library-utils

** schematic symbol

I'm not going to read kicad library file, because I need heuristics to
determine groups, and that's not maintainable

Different varaints have different number of pins, different packaging, and
different pin number

*** TODO negative signal (e.g. ~RESET)

** footprints
Well, actually footprint is another story. I need to get the exact position of
pads, and borders. That's hard to maintain afterall. Kicad footprint library is
pretty good, and I'm using it.

** Reference
Some Kicad library documentations are very useful:
- https://kicad-pcb.org/libraries/klc/: KiCad Library Convention

And the real schematic and footprint libraries:
- https://github.com/kicad/kicad-symbols
- https://github.com/KiCad/kicad-footprints

Of course, the library editor is inside Kicad source code:
- https://github.com/KiCad/kicad-source-mirror



* DONE-list

** DONE Julia and Racket interop
CLOSED: [2020-04-13 Mon 19:05]
*** build juila code into a static binary
Although the startup overhead will be reduced, I don't feel this is the best
option compared to client-server architecture.
*** DONE run Julia code as server
CLOSED: [2020-04-13 Mon 19:04]
What kind of server architecture? Raw socket? Or Http server?

- [[https://github.com/JuliaWeb/HTTP.jl][JuliaWeb/HTTP.jl]]: seems to be more mature, try this first.
- [[https://github.com/JuliaWeb/JuliaWebAPI.jl][JuliaWeb/JuliaWebAPI.jl]]: this is interesting, it wraps a julia function as a
  remote callable API.

And I should probably write local files and send filename via POST HTTP request
instead of sending all data via HTTP payload. The result should probably also be
a local filename.  *But* for a remote server, I still need to send the whole
file, so just do a whole file as payload.

In a word, use *HTTP.jl* to start a remote server that handles HTTP POST
request, and response the result file. Hopefully doing this async.

** lef/def and RePlAce
*** DONE connect lef with def
CLOSED: [2020-04-02 四 18:31]
*** DONE visualize lef/def
CLOSED: [2020-04-02 四 18:31]
*** CANCELED read academic benchmark ISPD05 and convert to lef/def
CLOSED: [2020-04-02 四 19:33]
*** DONE generate lef/def for my PCB
CLOSED: [2020-04-03 五 17:18]
*** DONE verify RePlAce performance on my PCB
CLOSED: [2020-04-03 五 18:15]

It crashed. How then? It is pretty much impossible to debug RePlAce code. Maybe
restart my own placement code?

*** DONE place.jl use lef/def and debug on my small scale
CLOSED: [2020-04-13 Mon 19:05]

** TODO use VLSI placement benchmarks
*** DONE figure out the format of ISPD benchmarks
CLOSED: [2020-03-16 一 21:05]
*** DONE run existing placers
CLOSED: [2020-03-16 一 21:05]
- [[https://github.com/limbo018/DREAMPlace][limbo018/DREAMPlace]]
- RePIAce code: [[https://github.com/The-OpenROAD-Project/RePlAce][The-OpenROAD-Project/RePlAce]]
- [[https://github.com/The-OpenROAD-Project/OpenROAD][The-OpenROAD-Project/OpenROAD]]: an umbrella project contains placers and
  routers as submodules

*** DONE read ISPD 05/06 benchmarks
CLOSED: [2020-03-16 一 22:03]
*** DONE visualization
CLOSED: [2020-03-17 二 00:39]

*** Implement other placers
- KraftWerk
- Capo
- mPL
- APlace
- FastPlace
- NTUplace3
- SimPL
- Eplace

** DONE constraint optimization
CLOSED: [2020-04-13 Mon 19:07]
*** whether this is mixed-size placement?
*** figure out PCB input format
*** generate a simple PCB input file
*** implement some placement algorithm
*** import back

** CANCELED Libraries
CLOSED: [2020-04-13 Mon 19:19]
- define all popular libraries
- compose them together
- write visualization and gerber generation for comp-IC
- assign footprint
** CANCELED kicad symbol library
CLOSED: [2020-04-29 Wed 19:22]
- visualization
- API

For kicad symbol library, the only thing I care about is actually the "pinname
to index" mapping, which is consistent with kicad footprint pin index for
different packagings.

However, different packaging should have different pin index, but one symbol can
have many footprints. How is that possible?

** DONE visualize of placement result on racket side
CLOSED: [2020-04-18 Sat 18:30]

** DONE Unified Libraries
CLOSED: [2020-05-05 Tue 17:32]
- https://github.com/Digi-Key/digikey-kicad-library

*** DONE schematic symbol library
CLOSED: [2020-05-05 Tue 17:32]
- kicad official library should be enough (UPDATE: no)

*** DONE PCB footprint library
CLOSED: [2020-05-05 Tue 17:32]

** auto placement
*** DONE for footprint
CLOSED: [2020-05-05 Tue 21:07]
*** DONE for symbols
CLOSED: [2020-05-05 Tue 21:07]

** Random
*** DONE footprint coordinates system mismatch
CLOSED: [2020-05-06 Wed 13:46]
