#+TITLE: Backup documents

** Wire connections

wires connections:
- not connected (draw a curve or just leave it there but no dot)
- dot connected

* References
** KiCAD
- file formats: http://www.kicad-pcb.org/help/file-formats/
** footprint
https://eesemi.com/ic-package-types.htm

*** QFN (Quad Flat No Leads)

| Part Number | No. of Pads | Body Size     | Body Thickness | Pad Pitch |
|-------------+-------------+---------------+----------------+-----------|
| QFN-16      |          16 | 3 mm x 3 mm   | 0.9 mm         | 0.5 mm    |
| QFN-24      |          24 | 4 mm x 4 mm   | 0.9 mm         | 0.5 mm    |
| QFN-32      |          32 | 5 mm x 5 mm   | 0.9 mm         | 0.5 mm    |
| QFN-44      |          32 | 5 mm x 5 mm   | 0.9 mm         | 0.5 mm    |
| QFN-50      |          50 | 5 mm x 10 mm  | 1.0 mm         | 0.5 mm    |
| QFN-72      |          72 | 10 mm x 10 mm | 0.9 mm         | 0.5 mm    |

** DIP


SSOP-10_3.9x4.9mm_P1.00mm.kicad_mod
SSOP-14_5.3x6.2mm_P0.65mm.kicad_mod
SSOP-16_3.9x4.9mm_P0.635mm.kicad_mod
SSOP-16_4.4x5.2mm_P0.65mm.kicad_mod
SSOP-16_5.3x6.2mm_P0.65mm.kicad_mod
SSOP-18_4.4x6.5mm_P0.65mm.kicad_mod
SSOP-20_3.9x8.7mm_P0.635mm.kicad_mod
SSOP-20_4.4x6.5mm_P0.65mm.kicad_mod
SSOP-20_5.3x7.2mm_P0.65mm.kicad_mod
SSOP-24_3.9x8.7mm_P0.635mm.kicad_mod
SSOP-24_5.3x8.2mm_P0.65mm.kicad_mod
SSOP-28_3.9x9.9mm_P0.635mm.kicad_mod
SSOP-28_5.3x10.2mm_P0.65mm.kicad_mod
SSOP-32_11.305x20.495mm_P1.27mm.kicad_mod
SSOP-44_5.3x12.8mm_P0.5mm.kicad_mod
SSOP-48_7.5x15.9mm_P0.635mm.kicad_mod
SSOP-56_7.5x18.5mm_P0.635mm.kicad_mod
SSOP-8_2.95x2.8mm_P0.65mm.kicad_mod
SSOP-8_3.95x5.21x3.27mm_P1.27mm.kicad_mod
SSOP-8_3.9x5.05mm_P1.27mm.kicad_mod
SSOP-8_5.25x5.24mm_P1.27mm.kicad_mod

* Email
This is a question rather than an issue. I'm trying to implement the global
placer. In your paper in section 3.2, you mentioned:

> The computation consists of four steps: 1) density map computation; 2) a u,v ;
3) ψ in forward or ξ in backward; 4) D in forward ∂D in backwrad. Steps 2 and 3
are the bulk computation parts.

I actually find it particularly costly for computing density maps. If I
understand correctly, the density is computed by calculating overlapped area of
all cells with all bins. I'm computing it using the following Julia code
(simplified). I'm also doing the computation on GPU using
[CuArrays.jl](https://github.com/JuliaGPU/CuArrays.jl)

```julia
function rho(xs, ys, ws, hs, binxs1, binys1, binxs2, binys2)
    x1 = max.((xs .- ws) / 2, binxs1)
    y1 = max.((ys .- hs) / 2, binys1)
    x2 = min.((xs .+ ws) / 2, binxs2)
    y2 = min.((ys .+ hs) / 2, binys2)
    sum(max.(x2 - x1, 0) .* max.(y2 - y1, 0), dims=3)
end
```

For the relatively small ISPD 2005 adaptec1 benchmark, there are about 210k
cells and 220k nets. I'm using 300x300 bins. It takes about 10 seconds to
compute density map. If using CPU it takes 10 minutes. Other computations (WA
wirelength forward/backward, 2D FFT) seem to take about 1 second (which is still
much higher than yours).

I noticed your implementation seems to take less than 1ms for each iteration,
which is so impressive. But I could not follow your code very easily. Could you
point me your implementation of density map computation? Is there any trick to
compute this efficiently?

One trick I can think of is that each cell usually only overlaps with 1 bin. But
I'm not sure if this is the problem.
